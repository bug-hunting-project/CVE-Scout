from flask import request, jsonify
from flask_restx import Namespace, Resource


def cve(mongo_client, sqlite_client):
    api = Namespace("cve", description="CVE 관련 API")
    PAGE_SIZE = 2000

    @api.route("/all")
    class CveAllList(Resource):
        @api.doc(
            params={
                "page": {
                    "description": "가져올 페이지 번호입니다. 결과를 페이지별로 나누는 데 사용됩니다.",
                    "type": "int",  # 데이터 타입을 명시합니다.
                    "required": False,  # 필수 파라미터인지 여부를 명시합니다.
                    "default": 1  # 기본값을 명시합니다.
                }
            },
            responses={200: "Success"}, 
            description="MongoDB에 저장된 모든 CVE ID 리스트 출력"
        )
        def get(self):
            page = int(request.args.get('page', 1))
            if page <= 0:
                page = 1
            
             # SQLite 데이터베이스에 연결
            cursor = sqlite_client.cursor()
            
             # 전체 CVE 항목 수를 가져옵니다.
            cursor.execute("SELECT COUNT(id) FROM vulnerability_metadata WHERE namespace LIKE 'nvd:cpe'")
            total_cves = cursor.fetchone()[0]

            offset = (page - 1) * PAGE_SIZE

            cve_data = []
            cursor.execute(f"SELECT id FROM vulnerability_metadata WHERE namespace LIKE 'nvd:cpe' LIMIT {PAGE_SIZE} OFFSET {offset}")
            for row in cursor.fetchall():
                cve_data.append(row[0])

            # 데이터베이스 연결을 닫습니다.
            cursor.close()

            return jsonify({"cve": cve_data, "page": page, "total_pages": (total_cves + PAGE_SIZE - 1) // PAGE_SIZE})

    @api.route("/<int:year>")
    class CveYearList(Resource):
        @api.doc(
            params={"year": "Year of the CVE"},
            responses={200: "Success"},
            description="MongoDB에 저장된 특정 연도의 CVE ID 리스트 출력",
        )
        def get(self, year):
            cve_data = []
            
            # SQLite 쿼리를 실행하여 CVE ID를 가져옵니다.
            cursor = sqlite_client.cursor()
            cursor.execute(f"SELECT id FROM vulnerability_metadata WHERE namespace LIKE 'nvd:cpe' AND id LIKE 'CVE-{year}-%'")
            for row in cursor.fetchall():
                cve_data.append(row[0])

            # 데이터베이스 연결을 닫습니다.
            cursor.close()

            return jsonify({"cve": cve_data})

    @api.route("/detail/<string:cve_id>")
    class CveDetail(Resource):
        @api.doc(
            params={"cve_id": "CVE ID"},
            responses={200: "Success", 404: "CVE not found"},
            description="MongoDB에 저장된 특정 CVE의 정보 출력",
        )
        def get(self, cve_id):
            cursor = sqlite_client.cursor()

            # SQLite 쿼리를 실행하여 CVE 정보를 가져옵니다.
            cursor.execute(
                f"SELECT id, Namespace, data_source, severity, urls, description, cvss FROM vulnerability_metadata WHERE namespace LIKE 'nvd:cpe' AND id LIKE '{cve_id}'"
            )
            cve_info = cursor.fetchone()

            # 데이터베이스 연결을 닫습니다.
            cursor.close()

            # 결과를 반환합니다.
            if cve_info:
                # 결과를 딕셔너리로 변환합니다.
                keys = ["id", "Namespace", "data_source", "severity", "urls", "description", "cvss"]
                return jsonify(dict(zip(keys, cve_info)))
            else:
                return jsonify({"error": "CVE not found"}), 404

    return api
