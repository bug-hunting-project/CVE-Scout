import os
import sqlite3
import csv

class Sqlite_Handler:
    def __init__(self, db_path):
        # if not os.path.exists(db_path):
        #     print(f"Warning: Database file {db_path} not found. It will be created upon initialization.")
        self.db_path = db_path
        
        self.db_conn = sqlite3.connect(self.db_path)
        self.cursor = self.db_conn.cursor()
    
    def table_exists(func):
        def wrapper(self, table_name, *args, **kwargs):
            check_query = f"SELECT name FROM sqlite_master WHERE type='table' AND name='{table_name}';"
            self.cursor.execute(check_query)
            if bool(self.cursor.fetchone()):
                # print(f"Error: Table {table_name} does not exist.")
                return False
            return func(self, table_name, *args, **kwargs)
        return wrapper
    
    @table_exists
    def create_table(self, table_name, schema):
        columns_list = [f"{column_name} {data_type}" for column_name, data_type in schema.items()]
        create_query = f"CREATE TABLE {table_name}({', '.join(columns_list)})"
        self.cursor.execute(create_query)
        return True

    def delete_table(self, table_name):
        try:
            delete_query = f"DROP TABLE {table_name};"
            self.cursor.execute(delete_query)
            return True
        except sqlite3.OperationalError as e:
            print(f"Error occurred while trying to delete table {table_name}: {str(e)}")
            return False
    
    def import_csv(self, csv_path, table_name, schema):
        with open(csv_path, 'r') as file:
            csv_reader = csv.reader(file)
            next(csv_reader)
            
            column_names = ', '.join(schema.keys())
            placeholders = ', '.join(['?'] * len(schema))
            insert_query = f"INSERT INTO {table_name}({column_names}) VALUES ({placeholders})"
            
            try:
                for row in csv_reader:
                    self.cursor.execute(insert_query, row)
                self.db_conn.commit()  # Commit changes to the database
                return True
            except Exception as e:
                print(f"Error occurred while importing CSV: {str(e)}")
                return False
            
    def import_poc_csv(self, csv_path, table_name, schema):
        # Exclude 'no' from the schema keys
        column_names_list = [key for key in schema.keys() if key != 'no']
        column_names = ', '.join(column_names_list)
        placeholders = ', '.join(['?'] * len(column_names_list))
        insert_query = f"INSERT INTO {table_name}({column_names}) VALUES ({placeholders})"
        
        with open(csv_path, 'r') as file:
            csv_reader = csv.reader(file)
            next(csv_reader)  # Skip the header
            
            try:
                for row in csv_reader:
                    self.cursor.execute(insert_query, row)
                self.db_conn.commit()  # Commit changes to the database
                return True
            except Exception as e:
                print(f"Error occurred while importing CSV: {str(e)}")
                return False
